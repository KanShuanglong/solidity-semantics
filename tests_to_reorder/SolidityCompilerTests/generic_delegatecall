char const* sourceCode = R"**(
		contract Receiver {
			uint public received;
			address public sender;
			uint public value;
			function Receiver() payable {}
			function receive(uint x) payable { received = x; sender = msg.sender; value = msg.value; }
		}
		contract Sender {
			uint public received;
			address public sender;
			uint public value;
			function Sender() payable {}
			function doSend(address rec) payable
			{
				bytes4 signature = bytes4(bytes32(keccak256("receive(uint)")));
				if (rec.delegatecall(signature, 23)) {}
			}
		}
)**";
compileAndRunWithoutCheck(sourceCode, 0, "Receiver", true);
u160 const c_receiverAddress = m_contractAddress;
compileAndRunWithoutCheck(sourceCode, 50, "Sender", true);
if (false) {
	u160 const c_senderAddress = m_contractAddress;
	BOOST_CHECK(m_sender != c_senderAddress); // just for sanity
	ABI_CHECK(callContractFunctionWithValue("doSend(address)", 11, c_receiverAddress), encodeArgs());
	ABI_CHECK(callContractFunction("received()"), encodeArgs(u256(23)));
	ABI_CHECK(callContractFunction("sender()"), encodeArgs(u160(m_sender)));
	ABI_CHECK(callContractFunction("value()"), encodeArgs(u256(11)));
	m_contractAddress = c_receiverAddress;
	ABI_CHECK(callContractFunction("received()"), encodeArgs(u256(0)));
	ABI_CHECK(callContractFunction("sender()"), encodeArgs(u256(0)));
	ABI_CHECK(callContractFunction("value()"), encodeArgs(u256(0)));
	BOOST_CHECK(storageEmpty(c_receiverAddress));
	BOOST_CHECK(!storageEmpty(c_senderAddress));
	BOOST_CHECK_EQUAL(balanceAt(c_receiverAddress), 0);
	BOOST_CHECK_EQUAL(balanceAt(c_senderAddress), 50 + 11);
}