char const* sourceCode = R"(
	contract c {
		function set(uint key, bytes b) returns (bool) { data[key] = b; return true; }
		function copy(uint from, uint to) returns (bool) { data[to] = data[from]; return true; }
		mapping(uint => bytes) data;
	}
)";
compileAndRun(sourceCode);
// store a short byte array at 1 and a longer one at 2
ABI_CHECK(callContractFunction("set(uint,bytes)", 1, encodeDyn(string("2"))), encodeArgs(true));
ABI_CHECK(callContractFunction("set(uint,bytes)", 2, encodeDyn(string("2345"))), encodeArgs(true));
BOOST_CHECK(!storageEmpty(m_contractAddress));
// copy shorter to longer
ABI_CHECK(callContractFunction("copy(uint,uint)", 1, 2), encodeArgs(true));
BOOST_CHECK(!storageEmpty(m_contractAddress));
// copy empty to both
ABI_CHECK(callContractFunction("copy(uint,uint)", 99, 1), encodeArgs(true));
BOOST_CHECK(!storageEmpty(m_contractAddress));
ABI_CHECK(callContractFunction("copy(uint,uint)", 99, 2), encodeArgs(true));
BOOST_CHECK(storageEmpty(m_contractAddress));