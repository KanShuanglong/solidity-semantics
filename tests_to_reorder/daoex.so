


contract Bank{

	mapping(address=>int32) userBalances;

	function getUserBalance(address user) {
		 return userBalances[user];
	}

	function addToBalance(address add){
		 userBalances[add] += msg.value;
               
                 
	}

	function withdrawBalance(){
		 //int32 amountToWithdraw = userBalances;
                 userBalances[msg.sender] -= msg.value ;
		 functionCall(0;1;fallback;;msginfo(0,1,1,70));
		 	}
       
        function Bank() {userBalances.length=3;}

}


contract BankAttacker{
	 bool is_attack;
	 address bankAddress;

	 function BankAttacker(address bankAddressp, bool is_attackp){
	 	  bankAddress = bankAddressp;
		  is_attack = is_attackp;
	 }

	 function(){
                   
		if(is_attack == true){
	           is_attack = false;
                   
		   functionCall(1;0;withdrawBalance;;msginfo(1,0,2,75));
		}
	 }

	 function deposit(){
                  
	 	  functionCall(1;0;addToBalance;1;msginfo(1,0,8,75));
                  
	 }

	 function withdraw(){
                 

	 	  functionCall(1;0;withdrawBalance;;msginfo(1,0,2,75));
	 }	  

}

contract Main{
  
	 function main(){
	   
	     new Bank();
           
	   
	     new BankAttacker(0,true);
            
             
	   
	     functionCall(-1;1;deposit;;msginfo(-1,1,8,75));
             
	     functionCall(-1;1;withdraw;;msginfo(-1,1,2,75));
	 }
}

