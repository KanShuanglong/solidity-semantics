	char const* sourceCode = R"(
		pragma experimental ABIEncoderV2;
		contract C {
			struct S { uint a; uint[] b; }
			function f0() public pure returns (bytes) {
				return abi.encode();
			}
			function f1() public pure returns (bytes) {
				return abi.encode(1, 2);
			}
			function f2() public pure returns (bytes) {
				string memory x = "abc";
				return abi.encode(1, x, 2);
			}
			function f3() public pure returns (bytes r) {
				// test that memory is properly allocated
				string memory x = "abc";
				r = abi.encode(1, x, 2);
				bytes memory y = "def";
				require(y[0] == "d");
				y[0] = "e";
				require(y[0] == "e");
			}
			S s;
			function f4() public view returns (bytes r) {
				string memory x = "abc";
				s.a = 7;
				s.b.push(2);
				s.b.push(3);
				r = abi.encode(1, x, s, 2);
				bytes memory y = "def";
				require(y[0] == "d");
				y[0] = "e";
				require(y[0] == "e");
			}
		}
	)";
	compileAndRun(sourceCode, 0, "C");
	ABI_CHECK(callContractFunction("f0()"), encodeArgs(encodeDyn(string(""))));
	ABI_CHECK(callContractFunction("f1()"), encodeArgs(encodeRefArgs(uint64_t(2), encodeLogs(1, 2))));
	ABI_CHECK(callContractFunction("f2()"), encodeArgs(encodeRefArgs(uint64_t(2 + 3 + 8), encodeLogs(1, encodeDyn(string("abc")), 2))));
	ABI_CHECK(callContractFunction("f3()"), encodeArgs(encodeRefArgs(uint64_t(2 + 3 + 8), encodeLogs(1, encodeDyn(string("abc")), 2))));
        bytes s = encodeRefArgs(bigint(7), 1, 2, bigint(2), bigint(3));
	ABI_CHECK(callContractFunction("f4()"), encodeArgs(encodeRefArgs(uint64_t(2 + 3 + 8 + s.size()), encodeLogs(1, encodeDyn(string("abc")), s, 2))));