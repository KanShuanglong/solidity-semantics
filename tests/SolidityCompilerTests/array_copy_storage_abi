// NOTE: This does not really test copying from storage to ABI directly,
// because it will always copy to memory first.
char const* sourceCode = R"(
	pragma experimental ABIEncoderV2;
	contract c {
		uint8[] x;
		uint16[] y;
		uint24[] z;
		uint24[][] w;
		function test1() returns (uint8[]) {
			for (uint i = 0; i < 101; ++i)
				x.push(uint8(i));
			return x;
		}
		function test2() returns (uint16[]) {
			for (uint i = 0; i < 101; ++i)
				y.push(uint16(i));
			return y;
		}
		function test3() returns (uint24[]) {
			for (uint i = 0; i < 101; ++i)
				z.push(uint24(i));
			return z;
		}
		function test4() returns (uint24[][]) {
			w.length = 5;
			for (uint i = 0; i < 5; ++i)
				for (uint j = 0; j < 101; ++j)
					w[i].push(uint24(j));
			return w;
		}
	}
)";
compileAndRun(sourceCode);
	bytes valueSequence;
for (ssize_t i = 100; i >= 0; --i)
	valueSequence += toBigEndian(u256(i));
bytes valueSequence2;
for (byte b : valueSequence) {
	if (b != 100) {
		valueSequence2.push_back(0);
	}
	valueSequence2.push_back(b);
}
bytes valueSequence3, valueSequence4;
for (byte b : valueSequence) {
	if (b != 100) {
		valueSequence3.push_back(0);
		valueSequence3.push_back(0);
	}
	valueSequence4.push_back(0);
	valueSequence4.push_back(0);
	valueSequence3.push_back(b);
	valueSequence4.push_back(b);
}
ABI_CHECK(callContractFunction("test1()"), vector<bytes>(1, valueSequence + encodeRefArgs(0x01, 101)));
ABI_CHECK(callContractFunction("test2()"), vector<bytes>(1, valueSequence2 + encodeRefArgs(0x01, 101)));
ABI_CHECK(callContractFunction("test3()"), vector<bytes>(1, valueSequence3 + encodeRefArgs(0x01, 101)));
ABI_CHECK(callContractFunction("test4()"), vector<bytes>(1,
	valueSequence3 + encodeRefArgs(0x01, 101) +
	valueSequence4 + encodeRefArgs(0x01, 101) +
	valueSequence4 + encodeRefArgs(0x01, 101) +
	valueSequence4 + encodeRefArgs(0x01, 101) +
	valueSequence4 + encodeRefArgs(0x01, 101) +
			encodeRefArgs(0x01, 5)
));