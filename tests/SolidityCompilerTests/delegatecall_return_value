BOOST_AUTO_TEST_CASE(delegatecall_return_value)
{
	char const* sourceCode = R"DELIMITER(
		contract C {
			uint value;
			function set(uint _value) external {
				value = _value;
			}
			function get() external view returns (uint) {
				return value;
			}
			function get_delegated() external view returns (bool) {
				return this.delegatecall(bytes4(sha3("get()")));
			}
			function assert0() external view {
				assert(value == 0);
			}
			function assert0_delegated() external view returns (bool) {
				return this.delegatecall(bytes4(sha3("assert0()")));
			}
		}
	)DELIMITER";
	compileAndRunWithoutCheck(sourceCode, 0, "C", true);
	if (false) {
		ABI_CHECK(callContractFunction("get()"), encodeArgs(u256(0)));
		ABI_CHECK(callContractFunction("assert0_delegated()"), encodeArgs(u256(1)));
		ABI_CHECK(callContractFunction("get_delegated()"), encodeArgs(u256(1)));
		ABI_CHECK(callContractFunction("set(uint)", u256(1)), encodeArgs());
		ABI_CHECK(callContractFunction("get()"), encodeArgs(u256(1)));
		ABI_CHECK(callContractFunction("assert0_delegated()"), encodeArgs(u256(0)));
		ABI_CHECK(callContractFunction("get_delegated()"), encodeArgs(u256(1)));
		ABI_CHECK(callContractFunction("set(uint)", u256(42)), encodeArgs());
		ABI_CHECK(callContractFunction("get()"), encodeArgs(u256(42)));
		ABI_CHECK(callContractFunction("assert0_delegated()"), encodeArgs(u256(0)));
		ABI_CHECK(callContractFunction("get_delegated()"), encodeArgs(u256(1)));
	}
}