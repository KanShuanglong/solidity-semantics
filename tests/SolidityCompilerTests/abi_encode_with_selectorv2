char const* sourceCode = R"(
    pragma experimental ABIEncoderV2;
    contract C {
        function f0() public pure returns (bytes) {
            return abi.encodeWithSelector(0x12345678);
        }
        function f1() public pure returns (bytes) {
            return abi.encodeWithSelector(0x12345678, "abc");
        }
        function f2() public pure returns (bytes) {
            bytes4 x = 0x12345678;
            return abi.encodeWithSelector(x, "abc");
        }
        function f3() public pure returns (bytes) {
            bytes4 x = 0x12345678;
            return abi.encodeWithSelector(x, uint(-1));
        }
        struct S { uint a; string b; uint16 c; }
        function f4() public pure returns (bytes) {
            bytes4 x = 0x12345678;
            S memory s;
            s.a = 0x1234567;
            s.b = "Lorem ipsum dolor sit ethereum........";
            s.c = 0x1234;
            return abi.encodeWithSelector(x, uint(-1), s, uint(3));
        }
    }
)";
compileAndRunWithoutCheck(sourceCode, 0, "C", true);
if (false) {
    ABI_CHECK(callContractFunction("f0()"), encodeArgs(0x20, 4, "\x12\x34\x56\x78"));
    vector<bytes> expectation;
    expectation = encodeArgs(0x20, 4 + 0x60) + vector<bytes>{{0x12, 0x34, 0x56, 0x78}} + encodeArgs(0x20, 3, "abc") + vector<bytes>(1, bytes(0x20 - 4));
    ABI_CHECK(callContractFunction("f1()"), expectation);
    expectation = encodeArgs(0x20, 4 + 0x60) + vector<bytes>{{0x12, 0x34, 0x56, 0x78}} + encodeArgs(0x20, 3, "abc") + vector<bytes>(1, bytes(0x20 - 4));
    ABI_CHECK(callContractFunction("f2()"), expectation);
    expectation = encodeArgs(0x20, 4 + 0x20) + vector<bytes>{{0x12, 0x34, 0x56, 0x78}} + encodeArgs(u256(-1)) + vector<bytes>(1, bytes(0x20 - 4));
    ABI_CHECK(callContractFunction("f3()"), expectation);
    expectation =
        encodeArgs(0x20, 4 + 0x120) +
        vector<bytes>{{0x12, 0x34, 0x56, 0x78}} +
        encodeArgs(u256(-1), 0x60, u256(3), 0x1234567, 0x60, 0x1234, 38, "Lorem ipsum dolor sit ethereum........") +
        vector<bytes>(1, bytes(0x20 - 4));
    ABI_CHECK(callContractFunction("f4()"), expectation);
}